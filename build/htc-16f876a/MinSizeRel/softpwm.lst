     1: #include "softpwm.h"
     2: #include "timer.h"
     3: #include "typedef.h"
     4: #include <assert.h>
     5: 
     6: #if USE_SOFTPWM
     7: 
     8: #define SOFTPWM_EVAL(x) x
     9: #define SOFTPWM_TIMER_SETUP timer1_init
    10: 
    11: uint8_t volatile softpwm_counter;
    12: uint8_t volatile softpwm_values[SOFTPWM_PIN_COUNT];
    13: 
    14: /**
    15:  * ISR for SOFTPWM receive
    16:  *
    17:  * @return received character or 0 if it's not SOFTPWM interrupt
    18:  */
    19: void
    20: softpwm_isr(void) SOFTPWM_ISR()
    21: 
    22:     void softpwm_enable(void) {
    23:   // SOFTPWM_INTERRUPT_FLAG = 0;
    24:   SOFTPWM_INTERRUPT_ENABLE = 1;
    25: }
    26: 
    27: void
    28: softpwm_disable(void) {
    29:   SOFTPWM_INTERRUPT_ENABLE = 0;
    30: }
    31: 
    32: void
    33: softpwm_init(void) {
    34:   uint8_t i;
    35: 
    36:   for(i = 0; i < SOFTPWM_PIN_COUNT; i++) {
    37:     softpwm_values[i] = 0;
    38: 
    39:     SOFTPWM_TRIS &= ~(1 << (i + SOFTPWM_PIN_FIRST));
    40:   }
    41: 
    42:   softpwm_counter = 0;
    43: 
    44:   SOFTPWM_TIMER_SETUP(PRESCALE_1_1);
    45: 
    46:   softpwm_enable();
    47: }
    48: 
    49: void
    50: softpwm_set(uint8_t ch, uint8_t duty) {
    51:   // assert(ch < SOFTPWM_PIN_COUNT);
    52:   softpwm_values[ch] = duty;
    53: }
    54: 
    55: #endif // USE_SOFTPWM
