     1: #include "format.h"
     2: #include "buffer.h"
     3: #include <math.h>
     4: #include <float.h>
     5: 
     6: static void
     7: format_putchar(char c) {
     8:   return;
     9: }
    10: 
    11: // putchar_fn* putchar_ptr = format_putchar;
    12: 
    13: // -------------------------------------------------------------------------
    14: void
    15: format_number(uint16_t n, uint8_t base, int8_t pad /*, int8_t pointpos*/) {
    16:   char buf[8 * sizeof(long)]; // Assumes 8-bit chars.
    17:   uint8_t di;
    18:   int8_t i = 0;
    19:   char padchar = ' ';
    20: 
    21:   if(pad < 0) {
    22:     pad = -pad;
    23:     padchar = '0';
    24:   }
    25: 
    26:   /*  if(n == 0) {
    27:       lcd_putch('0');
    28:       return;
    29:     }*/
    30: 
    31:   do {
    32:     /*    if(i == pointpos)
    33:           buf[i++] = '.';
    34:     */
    35:     di = n % base;
    36:     buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);
    37: 
    38:     n /= base;
    39:   } while(n > 0);
    40: 
    41:   while(pad-- > i) buffer_putch(padchar);
    42: 
    43:   for(; i > 0; i--) {
    44:     buffer_putch((char)buf[(int16_t)i - 1]);
    45:     // buffer_putch((buf[i - 1] < 10 ?(char)'0' + buf[i - 1] : (char)'A' + buf[i - 1] - 10));
    46:   }
    47: }
    48: 
    49: // -------------------------------------------------------------------------
    50: void
    51: format_xint32(/*putchar_fn* putchar,*/ uint32_t x) {
    52:   buffer_putch('0');
    53:   buffer_putch('x');
    54:   format_number((uint16_t)(x >> 16), 16, -4);
    55:   format_number((uint16_t)(x & 0xffff), 16, -4);
    56: }
    57: 
    58: void
    59: format_float(/*putchar_fn* putchar_ptr,*/ float num) {
    60:   short m = (int)log10(num);
    61:   char digit;
    62:   //  float tolerance = .0001;
    63: 
    64:   while(num > 0 + FLT_EPSILON) {
    65:     float weight = pow(10.0l, m);
    66:     digit = (char)floor(num / weight);
    67:     num -= (digit * weight);
    68:     buffer_putch('0' + digit);
    69:     if(m == 0)
    70:       buffer_putch('.');
    71:     m--;
    72:   }
    73: }
    74: 
    75: // -------------------------------------------------------------------------
    76: void
    77: format_double(double num) {
    78:   short m = (short)log10(num);
    79:   short digit;
    80:   //  double tolerance = .0001;
    81: 
    82:   while(num > 0 + DBL_EPSILON) {
    83:     double weight = pow(10.0l, m);
    84:     digit = (short)floor(num / weight);
    85:     num -= (digit * weight);
    86:     buffer_putch((char)('0' + digit));
    87:     if(m == 0)
    88:       buffer_putch('.');
    89:     m--;
    90:   }
    91: }
