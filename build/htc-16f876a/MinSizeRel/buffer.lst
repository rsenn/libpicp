     1: #include "buffer.h"
     2: #include <string.h>
     3: 
     4: buffer_t buffer;
     5: 
     6: /**
     7:  * @brief      { function_description }
     8:  */
     9: void
    10: buffer_init(void) {
    11:   buffer.p = 0;
    12:   buffer.n = 0;
    13: }
    14: 
    15: /**
    16:  * @brief      { function_description }
    17:  *
    18:  * @return     { description_of_the_return_value }
    19:  */
    20: char
    21: buffer_flush() {
    22:   /*while(buffer.p < buffer.n)
    23:     buffer.op(buffer.x[buffer.p++]);
    24:     */
    25:   BUFFER_CLEAR();
    26:   return 0;
    27: }
    28: 
    29: char
    30: buffer_putch(char ch) {
    31:   if(BUFFER_SIZE - buffer.n <= 0)
    32:     return 0;
    33:   buffer.x[buffer.n] = ch;
    34:   buffer.n++;
    35:   return 1;
    36: }
    37: 
    38: char
    39: buffer_put(const char* buf, len_t len) {
    40:   len_t i;
    41:   if(len > BUFFER_SIZE - buffer.n) // doesn't fit
    42:     return -1;
    43:   for(i = 0; i < len; i++) buffer.x[buffer.n + i] = buf[i];
    44:   buffer.n += len;
    45:   return 0;
    46: }
    47: 
    48: /**
    49:  * @brief      { function_description }
    50:  *
    51:  * @param[in]  x     { parameter_description }
    52:  *
    53:  * @return     { description_of_the_return_value }
    54:  */
    55: char
    56: buffer_puts(const char* x) {
    57:   while(*x) {
    58:     buffer_putch(*x);
    59:     ++x;
    60:   }
    61:   return 0;
    62: }
