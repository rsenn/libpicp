     1: /*
     2: NOKIA 5110 LCD driver library
     3: 84x48 lcd display PCD8544
     4: by Regulus Berdin
     5: V1.0 11/23/04   Created.
     6: */
     7: 
     8: #include "lcd5110.h"
     9: 
    10: #if USE_NOKIA5110_LCD
    11: 
    12: #define CLK_IN(data, bitnum)                                                                                           \
    13:   NOP();                                                                                                               \
    14:   LCD_CLK = 0;                                                                                                         \
    15:   NOP();                                                                                                               \
    16:   LCD_DATA = 0;                                                                                                        \
    17:   if((data) & (bitnum)) {                                                                                              \
    18:     LCD_DATA = 1;                                                                                                      \
    19:   }                                                                                                                    \
    20:   NOP();                                                                                                               \
    21:   LCD_CLK = 1
    22: 
    23: const char lcd_font[][5] = {
    24:     {0x00, 0x00, 0x00, 0x00, 0x00}, // sp
    25:     {0x00, 0x00, 0x2f, 0x00, 0x00}, // !
    26:     {0x00, 0x07, 0x00, 0x07, 0x00}, // "
    27:     {0x14, 0x7f, 0x14, 0x7f, 0x14}, // #
    28:     {0x24, 0x2a, 0x7f, 0x2a, 0x12}, // $
    29:     //  { 0xc4, 0xc8, 0x10, 0x26, 0x46 },  // %
    30:     {0b00100011, //%
    31:      0b00010011,
    32:      0b00001000,
    33:      0b01100100,
    34:      0b01100010},
    35:     {0x36, 0x49, 0x55, 0x22, 0x50}, // &
    36:     {0x00, 0x05, 0x03, 0x00, 0x00}, // '
    37:     {0x00, 0x1c, 0x22, 0x41, 0x00}, // (
    38:     {0x00, 0x41, 0x22, 0x1c, 0x00}, // )
    39:     {0x14, 0x08, 0x3E, 0x08, 0x14}, // *
    40:     {0x08, 0x08, 0x3E, 0x08, 0x08}, // +
    41:     {0x00, 0x00, 0x50, 0x30, 0x00}, // ,
    42:     {0x10, 0x10, 0x10, 0x10, 0x10}, // -
    43:     {0x00, 0x60, 0x60, 0x00, 0x00}, // .
    44:     {0x20, 0x10, 0x08, 0x04, 0x02}, // /
    45:     {0x3E, 0x51, 0x49, 0x45, 0x3E}, // 0
    46:     {0x00, 0x42, 0x7F, 0x40, 0x00}, // 1
    47:     {0x42, 0x61, 0x51, 0x49, 0x46}, // 2
    48:     {0x21, 0x41, 0x45, 0x4B, 0x31}, // 3
    49:     {0x18, 0x14, 0x12, 0x7F, 0x10}, // 4
    50:     {0x27, 0x45, 0x45, 0x45, 0x39}, // 5
    51:     {0x3C, 0x4A, 0x49, 0x49, 0x30}, // 6
    52:     {0x01, 0x71, 0x09, 0x05, 0x03}, // 7
    53:     {0x36, 0x49, 0x49, 0x49, 0x36}, // 8
    54:     {0x06, 0x49, 0x49, 0x29, 0x1E}, // 9
    55:     {0x00, 0x36, 0x36, 0x00, 0x00}, // :
    56:     {0x00, 0x56, 0x36, 0x00, 0x00}, // ;
    57:     {0x08, 0x14, 0x22, 0x41, 0x00}, // <
    58:     {0x14, 0x14, 0x14, 0x14, 0x14}, // =
    59:     {0x00, 0x41, 0x22, 0x14, 0x08}, // >
    60:     {0x02, 0x01, 0x51, 0x09, 0x06}, // ?
    61:     {0x32, 0x49, 0x59, 0x51, 0x3E}, // @
    62:     {0x7E, 0x11, 0x11, 0x11, 0x7E}, // A
    63:     {0x7F, 0x49, 0x49, 0x49, 0x36}, // B
    64:     {0x3E, 0x41, 0x41, 0x41, 0x22}, // C
    65:     {0x7F, 0x41, 0x41, 0x22, 0x1C}, // D
    66:     {0x7F, 0x49, 0x49, 0x49, 0x41}, // E
    67:     {0x7F, 0x09, 0x09, 0x09, 0x01}, // F
    68:     {0x3E, 0x41, 0x49, 0x49, 0x7A}, // G
    69:     {0x7F, 0x08, 0x08, 0x08, 0x7F}, // H
    70:     {0x00, 0x41, 0x7F, 0x41, 0x00}, // I
    71:     {0x20, 0x40, 0x41, 0x3F, 0x01}, // J
    72:     {0x7F, 0x08, 0x14, 0x22, 0x41}, // K
    73:     {0x7F, 0x40, 0x40, 0x40, 0x40}, // L
    74:     {0x7F, 0x02, 0x0C, 0x02, 0x7F}, // M
    75:     {0x7F, 0x04, 0x08, 0x10, 0x7F}, // N
    76:     {0x3E, 0x41, 0x41, 0x41, 0x3E}, // O
    77:     {0x7F, 0x09, 0x09, 0x09, 0x06}, // P
    78:     {0x3E, 0x41, 0x51, 0x21, 0x5E}, // Q
    79:     {0x7F, 0x09, 0x19, 0x29, 0x46}, // R
    80:     {0x46, 0x49, 0x49, 0x49, 0x31}, // S
    81:     {0x01, 0x01, 0x7F, 0x01, 0x01}, // T
    82:     {0x3F, 0x40, 0x40, 0x40, 0x3F}, // U
    83:     {0x1F, 0x20, 0x40, 0x20, 0x1F}, // V
    84:     {0x3F, 0x40, 0x38, 0x40, 0x3F}, // W
    85:     {0x63, 0x14, 0x08, 0x14, 0x63}, // X
    86:     {0x07, 0x08, 0x70, 0x08, 0x07}, // Y
    87:     {0x61, 0x51, 0x49, 0x45, 0x43}, // Z
    88:     {0x00, 0x7F, 0x41, 0x41, 0x00}, // [
    89:     {0x55, 0x2A, 0x55, 0x2A, 0x55}, // 55
    90:     {0x00, 0x41, 0x41, 0x7F, 0x00}, // ]
    91:     {0x04, 0x02, 0x01, 0x02, 0x04}, // ^
    92:     {0x40, 0x40, 0x40, 0x40, 0x40}, // _
    93:     {0x00, 0x01, 0x02, 0x04, 0x00}, // '
    94:     {0x20, 0x54, 0x54, 0x54, 0x78}, // a
    95:     {0x7F, 0x48, 0x44, 0x44, 0x38}, // b
    96:     {0x38, 0x44, 0x44, 0x44, 0x20}, // c
    97:     {0x38, 0x44, 0x44, 0x48, 0x7F}, // d
    98:     {0x38, 0x54, 0x54, 0x54, 0x18}, // e
    99:     {0x08, 0x7E, 0x09, 0x01, 0x02}, // f
   100:     {0x0C, 0x52, 0x52, 0x52, 0x3E}, // g
   101:     {0x7F, 0x08, 0x04, 0x04, 0x78}, // h
   102:     {0x00, 0x44, 0x7D, 0x40, 0x00}, // i
   103:     {0x20, 0x40, 0x44, 0x3D, 0x00}, // j
   104:     {0x7F, 0x10, 0x28, 0x44, 0x00}, // k
   105:     {0x00, 0x41, 0x7F, 0x40, 0x00}, // l
   106:     {0x7C, 0x04, 0x18, 0x04, 0x78}, // m
   107:     {0x7C, 0x08, 0x04, 0x04, 0x78}, // n
   108:     {0x38, 0x44, 0x44, 0x44, 0x38}, // o
   109:     {0x7C, 0x14, 0x14, 0x14, 0x08}, // p
   110:     {0x08, 0x14, 0x14, 0x18, 0x7C}, // q
   111:     {0x7C, 0x08, 0x04, 0x04, 0x08}, // r
   112:     {0x48, 0x54, 0x54, 0x54, 0x20}, // s
   113:     {0x04, 0x3F, 0x44, 0x40, 0x20}, // t
   114:     {0x3C, 0x40, 0x40, 0x20, 0x7C}, // u
   115:     {0x1C, 0x20, 0x40, 0x20, 0x1C}, // v
   116:     {0x3C, 0x40, 0x30, 0x40, 0x3C}, // w
   117:     {0x44, 0x28, 0x10, 0x28, 0x44}, // x
   118:     {0x0C, 0x50, 0x50, 0x50, 0x3C}, // y
   119:     {0x44, 0x64, 0x54, 0x4C, 0x44}  // z
   120: };
   121: 
   122: // -------------------------------------------------------------------------
   123: uint8_t
   124: lcd_str_width(const char* c) {
   125:   uint8_t i;
   126:   i = 0;
   127:   while(*c) {
   128:     ++i;
   129:     ++c;
   130:   }
   131:   //  return i;
   132:   return ((i << 1) + i) << 1; // return i*6
   133: }
   134: 
   135: // -------------------------------------------------------------------------
   136: void
   137: lcd_send(uint8_t a, uint8_t cmd) {
   138:   // set if data or command byte
   139:   LCD_DC = 1;
   140:   if(cmd == LCD_TCMD) {
   141:     LCD_DC = 0;
   142:   }
   143:   NOP();
   144:   LCD_CE = 0;
   145:   // clock in data in A
   146:   CLK_IN(a, BIT7);
   147:   CLK_IN(a, BIT6);
   148:   CLK_IN(a, BIT5);
   149:   CLK_IN(a, BIT4);
   150:   CLK_IN(a, BIT3);
   151:   CLK_IN(a, BIT2);
   152:   CLK_IN(a, BIT1);
   153:   CLK_IN(a, BIT0);
   154:   NOP();
   155:   LCD_CE = 1;
   156: }
   157: 
   158: // -------------------------------------------------------------------------
   159: void
   160: lcd_init(void) {
   161:   LCD_TRIS();
   162:   __delay_ms(20);
   163:   // delay10ms(20);
   164:   NOP();
   165:   LCD_CLK = 0;
   166:   NOP();
   167:   LCD_DATA = 1;
   168:   NOP();
   169:   LCD_DC = 0;
   170:   NOP();
   171:   LCD_CE = 1;
   172:   NOP();
   173:   // reset LCD
   174:   LCD_RESET = 0;
   175:   __delay_ms(20);
   176:   // delay10ms(20);
   177:   LCD_RESET = 1;
   178: #if 1
   179:   lcd_send(0x21, LCD_TCMD); // extended commands
   180:   lcd_send(0xC8, LCD_TCMD); // Vop (contrast)
   181:   lcd_send(0x06, LCD_TCMD); // Temp coefficient
   182:   lcd_send(0x13, LCD_TCMD); // LCD bias mode 1:48
   183:   lcd_send(0x20, LCD_TCMD); // LCD standard, Horiz addressing
   184:   lcd_send(0x0C, LCD_TCMD); // display control LCD normal mode
   185: // lcd_send(0b00001101,LCD_TCMD);  //display control LCD invert mode
   186: // lcd_send(0b00001001, LCD_TCMD);  //turn on all segments
   187: #else
   188:   lcd_send(0xA6, LCD_TCMD); // normal, 0xA7 negative
   189:   lcd_send(0xA3, LCD_TCMD); // bias
   190:   lcd_send(0xA1, LCD_TCMD); // addressing
   191:   lcd_send(0xC0, LCD_TCMD); // direct, linear, normal
   192:   lcd_send(0x22, LCD_TCMD); // V5 voltage
   193:   lcd_send(0x81, LCD_TCMD); //(volume electric)
   194:   lcd_send(0x2E, LCD_TCMD); // multiplier+stabilizer voltage
   195:   lcd_send(0x2F, LCD_TCMD); // urmarire?
   196:   lcd_send(0xE3, LCD_TCMD); // nop
   197:   lcd_send(0x40, LCD_TCMD); // linear start address
   198:   lcd_send(0xAF, LCD_TCMD); // lcd on, 0xAE lcd off
   199:   lcd_send(0xA5, LCD_TCMD); // lcd all on, test?
   200: #endif
   201: }
   202: 
   203: // -------------------------------------------------------------------------
   204: void
   205: lcd_test(void) {
   206:   uint16_t i;
   207:   lcd_gotoxy(0, 0);
   208:   for(i = 0; i < 504; ++i) {
   209:     lcd_send(i, LCD_TDATA);
   210:   }
   211: }
   212: 
   213: // -------------------------------------------------------------------------
   214: void
   215: lcd_clear(void) {
   216:   uint16_t i;
   217:   lcd_gotoxy(0, 0);
   218:   for(i = 0; i < 504; ++i) {
   219:     lcd_send(0, LCD_TDATA);
   220:   }
   221: }
   222: 
   223: // -------------------------------------------------------------------------
   224: void
   225: lcd_gotoxy(uint8_t x, unsigned y) {
   226:   lcd_send(x | 0b10000000, LCD_TCMD);
   227:   lcd_send((y & 0b00000111) | 0b01000000, LCD_TCMD);
   228: }
   229: 
   230: // -------------------------------------------------------------------------
   231: void
   232: lcd_putch(uint8_t c) {
   233:   if(c > 'z' || c < 32) {
   234:     return;
   235:   }
   236:   lcd_send(lcd_font[c - 32][0], LCD_TDATA);
   237:   lcd_send(lcd_font[c - 32][1], LCD_TDATA);
   238:   lcd_send(lcd_font[c - 32][2], LCD_TDATA);
   239:   lcd_send(lcd_font[c - 32][3], LCD_TDATA);
   240:   lcd_send(lcd_font[c - 32][4], LCD_TDATA);
   241:   lcd_send(0, LCD_TDATA);
   242: }
   243: 
   244: // -------------------------------------------------------------------------
   245: #if 1
   246: void
   247: lcd_puts(const char* s) {
   248:   while(*s) {
   249:     lcd_putch(*s);
   250:     ++s;
   251:   }
   252:   // while(*s) {lcd_putch(*s++);}
   253: }
   254: 
   255: // -------------------------------------------------------------------------
   256: void
   257: lcd_center_puts(uint8_t y, const char* c) {
   258:   lcd_gotoxy(41 - (lcd_str_width(c) / 2), y);
   259:   lcd_puts(c);
   260: }
   261: #endif
   262: 
   263: // -------------------------------------------------------------------------
   264: void
   265: lcd_puts2(char* s) {
   266:   while(*s) {
   267:     lcd_putch(*s);
   268:     ++s;
   269:   }
   270:   // while(*s) {lcd_putch(*s++);}
   271: }
   272: 
   273: // -------------------------------------------------------------------------
   274: void
   275: lcd_clear_line(uint8_t y) {
   276:   uint8_t k;
   277:   lcd_gotoxy(0, y);
   278:   for(k = 0; k < 83; ++k) {
   279:     lcd_send(0, LCD_TDATA);
   280:   }
   281: }
   282: 
   283: // -------------------------------------------------------------------------
   284: void
   285: lcd_center_puts2(uint8_t y, char* c, uint8_t len) {
   286:   lcd_gotoxy(42 - (len << 1) - len, y);
   287:   while(len) {
   288:     lcd_putch(*c);
   289:     ++c;
   290:     --len;
   291:   }
   292: }
   293: 
   294: const char bat_symbol[] = {0b00111000,
   295:                            0b11111110,
   296:                            0b10000010,
   297:                            0b10000010,
   298:                            0b10000010,
   299:                            0b10000010,
   300:                            0b10000010,
   301:                            0b10000010,
   302:                            0b10000010,
   303:                            0b10000010,
   304:                            0b10000010,
   305:                            0b10000010,
   306:                            0b11111110};
   307: 
   308: // -------------------------------------------------------------------------
   309: void
   310: lcd_battery(uint8_t chg) {
   311:   uint8_t i;
   312:   chg = 12 - chg;
   313:   lcd_gotoxy(71, 0);
   314:   for(i = 0; i < 13; ++i) {
   315:     if(i >= chg) {
   316:       lcd_send(0b11111110, LCD_TDATA);
   317:     } else {
   318:       lcd_send(bat_symbol[i], LCD_TDATA);
   319:     }
   320:   }
   321: }
   322: 
   323: // -------------------------------------------------------------------------
   324: #if 0
   325: void
   326: lcd_bluetooth(void) {
   327:   lcd_gotoxy(0, 0);
   328:   lcd_send(0b00101000, LCD_TDATA);
   329:   lcd_send(0b11111110, LCD_TDATA);
   330:   lcd_send(0b10010010, LCD_TDATA);
   331:   lcd_send(0b01101100, LCD_TDATA);
   332: }
   333: #endif
   334: 
   335: // -------------------------------------------------------------------------
   336: void
   337: lcd_symbol(const char* sym) {
   338:   uint8_t i, n;
   339:   n = sym[0];
   340:   for(i = 1; i <= n; ++i) {
   341:     lcd_send(sym[i], LCD_TDATA);
   342:   }
   343: }
   344: 
   345: #endif // USE_NOKIA5110_LCD
